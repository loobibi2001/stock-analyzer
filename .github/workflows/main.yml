# .github/workflows/main.yml
# 這個檔案告訴 GitHub Actions 機器人該如何執行我們的任務

name: Daily Stock Analysis

# 觸發條件：設定排程
on:
  workflow_dispatch: # 允許手動觸發
  schedule: # 啟用自動排程
    # 使用 UTC 時間，'0 8 * * 1-5' 代表台灣時間 (UTC+8) 下午 4 點，且只在週一到週五執行
    - cron: '0 8 * * 1-5'

jobs:
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虛擬環境來執行

    steps:
    # 步驟 1: 取得你 repository 的最新程式碼
    - name: Checkout repository
      uses: actions/checkout@v3

    # 步驟 1.5: 安裝必要的系統編譯套件
    # 確保有 build-essential (包含 gcc 和 g++) 和 Python 開發套件
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev

    # 2: 設定 Python 環境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # 指定 Python 版本

    # 步驟 3.1: 手動下載、編譯並安裝 TA-Lib 底層函式庫
    - name: Install TA-Lib from source
      run: |
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        # 設定安裝前綴到用戶目錄下的 local
        ./configure --prefix=${HOME}/local
        make
        # 使用 DESTDIR 將安裝暫存到臨時目錄
        make install DESTDIR=/tmp/ta-lib-install-temp
        
        # 診斷：列出臨時安裝目錄的內容，以確認檔案實際位置
        echo "Contents of /tmp/ta-lib-install-temp:"
        ls -R /tmp/ta-lib-install-temp
        
        # 確保目標目錄存在，這一步非常重要，確保在複製前目錄就已建立
        mkdir -p ${HOME}/local/lib
        mkdir -p ${HOME}/local/include/ta-lib
        
        # 複製所有 TA-Lib 的庫文件和頭文件到我們預期的最終目標位置
        # 這裡直接從 DESTDIR 和 prefix 組成的路徑複製
        cp -r /tmp/ta-lib-install-temp${HOME}/local/lib/. ${HOME}/local/lib/
        cp -r /tmp/ta-lib-install-temp${HOME}/local/include/ta-lib/. ${HOME}/local/include/ta-lib/
        
        # 診斷：檢查 TA-Lib 庫和頭文件是否存在於最終安裝路徑
        echo "Verifying TA-Lib C library installation at final location:"
        ls -l ${HOME}/local/lib/libta-lib.so* # 檢查動態庫
        ls -l ${HOME}/local/include/ta-lib/ta_libc.h # 檢查頭文件

    # 步驟 3.2: 安裝 Python 所需的套件
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # 設置 TA_LIB_DIR 環境變數，明確告知 TA-Lib 的 Python 綁定底層函式庫的位置
        # 指向我們新安裝的 ~/local 目錄
        export TA_LIB_DIR="${HOME}/local"
        pip install TA-Lib pandas requests

    # 步驟 4: 執行我們的 V25 Python 掃描腳本
    - name: Run stock analyzer
      env:
        # 將我們存在 GitHub Secrets 的 Token 傳遞給 Python 腳本
        API_TOKEN: ${{ secrets.FINMIND_API_TOKEN }}
      run: python V25_scanner_final.py # 使用最新的腳本檔名

    # 步驟 5: 將腳本產生變動的檔案 (index.html) 認可並推送回 repository
    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        # 只 add index.html 和 state 檔案，避免 add 其他不應被追蹤的檔案
        git add index.html portfolio_state.json
        # 如果有變動，才執行 commit
        git diff --staged --quiet || git commit -m "每日自動更新交易計畫"
        git push
